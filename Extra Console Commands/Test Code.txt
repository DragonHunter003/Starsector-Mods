
runcode FleetMemberAPI playerFlagship = Global.getSector().getPlayerFleet().getFlagship();
List<WeaponSlotAPI> shipWeaponSlotsList = playerFlagship.getHullSpec().getAllWeaponSlotsCopy();

for(WeaponSlotAPI weaponSlot: shipWeaponSlotsList)
{
	Console.showMessage( weaponSlot.getId() + " " + playerFlagship.getVariant().getWeaponId(weaponSlot.getId()));
}


/* Add weapon to specific slot ID*/
Global.getSector().getPlayerFleet().getFlagship().getVariant().addWeapon("slotid","weaponid")




import com.fs.starfarer.api.campaign.*;
List<SectorEntityToken>testList = Global.getSector().getEntitiesWithTag("salvageable");
for(SectorEntityToken testEntity : testList){
Console.showMessage(testEntity.getFullName());
}

import com.fs.starfarer.api.campaign.*;
List<SectorEntityToken>testList = Global.getSector().getCustomEntitiesWithTag("salvageable");
for(SectorEntityToken testEntity : testList){
Console.showMessage(testEntity.getFullName());
}

runcode PlanetAPI star = ((StarSystemAPI) $loc).getStar(); 
if (star != null) { 
$loc.addCustomEntity(null, null, "inactive_gate", "neutral").setCircularOrbitPointingDown(star, VectorUtils.getAngle(star.getLocation(), $playerFleet.getLocation()), 
MathUtils.getDistance(star.getLocation(), $playerFleet.getLocation()), 180f); } 

runcode PlanetAPI star = ((StarSystemAPI) $loc).getStar(); 
if (star != null) { 
$loc.addCustomEntity(null, null, "rat_damaged_cryosleeper", "neutral").setCircularOrbitPointingDown(star, VectorUtils.getAngle(star.getLocation(), $playerFleet.getLocation()), 
MathUtils.getDistance(star.getLocation(), $playerFleet.getLocation()), 180f); } 


runcode Console.showMessage(Global.getSector().getCurrentLocation());

runcode Console.showMessage($market.getPeopleCopy());

/* List all people in current market */
runcode 
int index = 0;
for(PersonAPI person : $market.getPeopleCopy())
{
	Console.showMessage(index+": "+person.getNameString());
	index++;
}

/* Set relations with specific person to 100 */
runcode 
int index = 0;
for(PersonAPI person : $market.getPeopleCopy())
{
	if(index == 1) 
	{
		Console.showMessage(person.getNameString());
		person.getRelToPlayer().setRel(1);
	}
	index++;
}

/* give first active SiC officer specific skill */
runcode 
import second_in_command.specs.SCOfficer;
import second_in_command.specs.SCSkillSpec;
import second_in_command.SCData;
import second_in_command.SCUtils;
CampaignFleetAPI fleet;
fleet = $sector.getPlayerFleet();
SCData data = SCUtils.getFleetData(fleet);
List<SCOfficer> activeOfficers = data.getAssignedOfficers();
int index = 0;
for (SCOfficer officer: activeOfficers)
{
	Console.showMessage(index + ": " + officer.getCurrentLevel());
	if(index == 0)
	{
		officer.addSkill("sc_tactical_efficient_ordnance");
	}
}

runcode
import second_in_command.specs.SCOfficer;
import second_in_command.specs.SCSkillSpec;
import second_in_command.specs.SCBaseSkillPlugin;
import second_in_command.specs.SCBaseAptitudePlugin;
import second_in_command.SCData;
import second_in_command.SCUtils;
CampaignFleetAPI fleet;
fleet = $sector.getPlayerFleet();
SCData data = SCUtils.getFleetData(fleet);
List<SCOfficer> activeOfficers = data.getAssignedOfficers();
int index = 0;
for (SCOfficer officer: activeOfficers)
{
        SCBaseAptitudePlugin aptitudePlugin = officer.getAptitudePlugin();
        aptitudePlugin.clearSections();
        aptitudePlugin.createSections();
        Console.showMessage(aptitudePlugin.getSections());
}


/* Give all active Second in Command Officers all skills*/
runcode 
import second_in_command.specs.SCOfficer;
import second_in_command.specs.SCSkillSpec;
import second_in_command.specs.SCBaseSkillPlugin;
import second_in_command.specs.SCBaseAptitudePlugin;
import second_in_command.specs.SCAptitudeSection;
import second_in_command.SCData;
import second_in_command.SCUtils;
CampaignFleetAPI fleet;
fleet = $sector.getPlayerFleet();
SCData data = SCUtils.getFleetData(fleet);
List<SCOfficer> activeOfficers = data.getAssignedOfficers();
int index = 0;
for (SCOfficer officer: activeOfficers)
{
	Console.showMessage(index+": "+officer);
	SCBaseAptitudePlugin aptitudePlugin = officer.getAptitudePlugin();
	aptitudePlugin.clearSections();
	aptitudePlugin.createSections();
        for(SCAptitudeSection section : aptitudePlugin.getSections())
	{
		for(int i = 0; i < section.getSkills().size(); i++)
		{ 
			Console.showMessage(section.getSkills().get(i));
			officer.addSkill((String)section.getSkills().get(i));
		}	
	}
}

/* Shows if player has specific skill */
runcode
Console.showMessage($playerFleet.getCommander().getStats().hasSkill("skillname"));

/* Gives player a specific skill */
runcode $playerFleet.getCommander().getStats().increaseSkill("skillname");

/* List all Fleets in current Sector */
runcode 
int index = 0;
for(CampaignFleetAPI fleet : $loc.getFleets())
{
	Console.showMessage(index + ":" + fleet.getName() + " "+ fleet.getCommander().getNameString()+ " "+fleet.getId() + " " + fleet.getCommander().getId());
	index++;
}

/* List known hullmods of playerfaction */
runcode
Console.showMessage($sector.getPlayerFaction().getKnownShips());

runcode Object[] knownPlayerShips = $sector.getPlayerFaction().getKnownShips().toArray();
int index = 0;for(Object ship : knownPlayerShips)
{
	if(ship.toString().contains("_default_D"))
	{
		Console.showMessage(ship.toString());
	}
	index++;
}


/* List all known shiphullids, names and designation Used to create CSV for all known hullmods*/
runcode for(ShipHullSpecAPI shipHullSpec : $settings.getAllShipHullSpecs())
{
	if($sector.getPlayerFaction().knowsShip(shipHullSpec.getHullId()))
	{
		String typeString = "Warship";
		String sizeString = shipHullSpec.getHullSize().toString();
		sizeString = sizeString.replace("_SHIP","");
		sizeString = sizeString.charAt(0) + sizeString.substring(1).toLowerCase();
		if(shipHullSpec.isCarrier())
		{
			typeString = "Carrier";
		};
		if(shipHullSpec.isCivilianNonCarrier())
		{
			typeString = "Civilian";
		}
		if(shipHullSpec.isPhase())
		{
			typeString = "Phase";
			if (shipHullSpec.isCivilianNonCarrier())
			{
				typeString += " (civilian)";
			}
		}
		
		
		Console.showMessage( 
		shipHullSpec.getHullName() + "," //Name
		+ shipHullSpec.getDesignation() + "," //Class
		+ sizeString + "," //Size
		+ typeString + ","	//TODO: Type
		+ shipHullSpec.getManufacturer() + "," //Design Type
		+ shipHullSpec.getBaseValue() + "," //Cost
		+ shipHullSpec.getHullId()); //ID
	}
}

/* List SkillIds for current admin */
runcode 
MutableCharacterStatsAPI adminStats = $sector.getCurrentlyOpenMarket().getAdmin().getStats();
for (MutableCharacterStatsAPI.SkillLevelAPI skill : adminStats.getSkillsCopy())
{
Console.showMessage(skill.getSkill().getId());
}

/* List all ships stored in current market with unlearned blueprints */
runcode FleetDataAPI storedShips = $sector.getCurrentlyOpenMarket().getSubmarket(Submarkets.SUBMARKET_STORAGE).getCargo().getMothballedShips(); 
List<FleetMemberAPI> storedShipsList = storedShips.getMembersListCopy();
for(FleetMemberAPI ship : storedShipsList)
{
	if(!$sector.getPlayerFaction().knowsShip(ship.getHullId().replace("_default_D","")))
	{
		Console.showMessage(ship.getShipName() + ": " + ship.getHullId().replace("_default_D",""));
		//ship.setShipName("unlearned");
		ship.setShipName($sector.getFaction("hegemony").pickRandomShipName());
	}
}

/* Gives current admin all omega core skills */
runcode 
MutableCharacterStatsAPI adminStats = $sector.getCurrentlyOpenMarket().getAdmin().getStats();
adminStats.increaseSkill("ethereal_enlightenment");
adminStats.increaseSkill("acumenious_oracle");
adminStats.increaseSkill("delphic_optimiser");

/* Teleport Fleets to player */ 
runcode 
int index = 0; 
CampaignFleetAPI playerFleet = $sector.getPlayerFleet();
Vector2f playerFleetPos = playerFleet.getLocation();
for(CampaignFleetAPI fleet : $loc.getFleets())
{
	Console.showMessage(fleet.getNameWithFaction());
	if(index == 0 && fleet != playerFleet)
	{
		fleet.setLocation(playerFleetPos.x, playerFleetPos.y);
	}
	index++;
} 